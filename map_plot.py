import pandas as pd
import plotly.graph_objects as go
import json
from typing import List, Dict

icon_by_type = {
    "station": "üöâ",
    "village": "üèòÔ∏è",   
    "portal": "üåÄ",
    "missing": "‚ùì",
    "base": "üõèÔ∏è",
    "point": "‚¨õ",
    "shipwreck": "‚öì",
    "trialchambers": "üóùÔ∏è"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with open("data/places.json", encoding="utf-8") as f:
    places = json.load(f)

with open("data/stations.json", encoding="utf-8") as f:
    stations = json.load(f)

with open("data/colors.json", encoding="utf-8") as f:
    biome_colors = json.load(f)

# –ß–µ–∫–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
def validate_data(data: List[Dict], source_name: str) -> None:
    required_fields = ["Name", "X", "Z", "Biome", "Type"]
    for row in data:
        for field in required_fields:
            if field not in row:
                raise ValueError(f"‚õî –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ {source_name}: {row}")

validate_data(places, "places.json")
validate_data(stations, "stations.json")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
df_places = pd.DataFrame(places)
df_stations = pd.DataFrame(stations)

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–∏–Ω —Ñ—Ä–µ–π–º –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–æ—á–µ–∫
df_all = pd.concat([df_stations, df_places], ignore_index=True)

# –î–æ–±–∞–≤–∏–º —Ü–≤–µ—Ç
df_all["Color"] = df_all["Biome"].apply(lambda b: biome_colors.get(b, "#aaaaaa"))

# –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫
fig = go.Figure()


# –õ–∏–Ω–∏—è –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏
fig.add_trace(go.Scatter(
    x=df_stations["X"],
    y=df_stations["Z"],
    mode="lines+markers",
    line=dict(color="gray", width=3, dash="dashdot"),
    marker=dict(size=6, color="black"),
    name="Train route",
    hoverinfo="skip"
))

for _, row in df_all.iterrows():
    x, z = row["X"], row["Z"]
    name = row["Name"]
    biome = row["Biome"]
    color = row["Color"]
    emoji = icon_by_type.get(row["Type"].lower(), icon_by_type["missing"])

    # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–µ—Ä—Ö—É
    fig.add_trace(go.Scatter(
        x=[x], y=[z + 10],
        mode = "text",
        text=[name],
        textposition="top center",
        textfont=dict(size=14, color='black'),
        showlegend=False,
        hoverinfo="skip"
    ))

    #  –°–≤–µ—á–µ–Ω–∏–µ (–¥–≤–æ–π–Ω–æ–π –º–∞—Ä–∫–µ—Ä)
    fig.add_trace(go.Scatter(
        x=[x], y=[z],
        mode="markers",
        marker=dict(size=10, color=color, opacity=1),
        name=f"{emoji} {name}",
        hovertemplate=f"<b>{name}</b><br>{biome}<br>X: {x}, Z: {z}<extra></extra>"
    ))

    fig.add_trace(go.Scatter(
        x=[x], y=[z], 
        mode="markers", 
        marker=dict(size=30, color=color, opacity=0.3),
        showlegend=False,
        hoverinfo="skip"
    ))


for _, row in df_all.iterrows():
    x, z = row["X"], row["Z"]
    name = row["Name"]
    biome = row["Biome"]
    color = row["Color"]
    emoji = icon_by_type.get(row["Type"].lower(), icon_by_type["missing"])

     # –≠–º–æ–¥–∑–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    fig.add_trace(go.Scatter( x=[x], y=[z],
        mode="text",
        text=[emoji],
        textposition="middle center",
        textfont=dict(size=15),
        showlegend=False,
        hoverinfo="skip"
    ))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
fig.update_layout(
    title="Minecraft map",
    xaxis_title="X",
    yaxis_title="Z",
    width=900,
    height=700,
    dragmode="zoom",
    hovermode="closest"
)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ HTML
fig.write_html("index.html")


